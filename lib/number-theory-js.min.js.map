{"version":3,"sources":["number-theory-js.js"],"names":["parseInt","isNaN","Error","push","partial","exports","define","amd","version","gcd","sieve","factorize","module","window","global"],"mappings":"AAQC,YAAkB,CAUlB,eAAoB,CAMnB,GAHA,EAAIA,WAAY,EAAZ,CAGJ,CAFA,EAAIA,WAAY,EAAZ,CAEJ,CAAIC,UAAYA,QAAhB,CACC,KAAM,IAAIC,MAAJ,CAAU,mBAAV,CAAN,CADD,WAIe,EAAJ,EAJX,CAKQ,IAAO,EAAP,CALR,CAMW,GANX,CAOQ,MAPR,CAQiB,CAAN,IARX,GAWQ,IAAO,GAAP,CAER,CAaD,eAA6B,CAE5B,IAAK,GAAI,EAAT,MAAsB,CAErB,GAAI,KAAJ,CACC,SAGD,GAAc,CAAV,KAAJ,CACC,QAED,CAED,QACA,CASD,aAAmB,CAMlB,GAFA,EAAIF,WAAY,EAAZ,CAEJ,CAAIC,QAAJ,CACC,KAAM,IAAIC,MAAJ,CAAU,kBAAV,CAAN,CADD,IAEO,IAAS,CAAL,GAAJ,CACN,MAAO,EAAP,CAGD,GAAI,GAAS,CAAC,CAAD,CAAb,CAEA,IAAK,GAAI,GAAI,CAAb,CAAgB,GAAhB,CAAuB,GAAK,CAA5B,CAEK,MAFL,EAGE,EAAOC,IAAP,GAHF,CAOA,QACA,CASD,aAAuB,CAGtB,GAFA,EAAIH,WAAY,EAAZ,CAEJ,CAAIC,QAAJ,CACC,KAAM,IAAIC,MAAJ,CAAU,kBAAV,CAAN,CADD,IAEO,IAAQ,CAAJ,EAAJ,CACN,MAAO,EAAP,CASD,OANI,GAAS,EAMb,CALI,EAAU,EAKd,CAJI,EAAI,CAIR,CAHI,EAAc,CAGlB,GAAS,CAER,GAAI,KAAJ,CAGC,MAFA,GAAQC,IAAR,GAEA,GAGD,GAAI,MAAJ,KACC,EAAOA,IAAP,GADD,CAGkB,CAAV,KAHR,EAOE,GAHA,IAGA,CAFA,EAAQA,IAAR,GAEA,CAAU,CAAN,IAAJ,CACC,SAKH,IArBQ,CAsBR,EAAc,CACd,CAMD,CA5GD,EAAIC,OAAJ,CAAc,KAAK,KAAK,MAhCN,CAgJlB,KAAM,GAAU,OAAhB,CAEuB,WAAnB,QAAOC,QAlJO,CAyJW,UAAlB,QAAOC,OAAP,EAA+C,IAAK,EAApB,UAAOC,GAzJhC,CA0JjBD,OAAO,KACC,CACNE,SADM,CAENC,KAFM,CAGNC,OAHM,CAINC,WAJM,CADD,CAAP,CA1JiB,EAmKjB,EAAOF,GAAP,EAnKiB,CAoKjB,EAAOC,KAAP,EApKiB,CAqKjB,EAAOC,SAAP,EArKiB,EAmJjBC,OAAOP,OAAP,CAAiB,CAChBG,SADgB,CAEhBC,KAFgB,CAGhBC,OAHgB,CAIhBC,WAJgB,CAoBlB,CAvKA,EAuKmB,WAAlB,QAAOE,OAAP,CAAyCC,MAAzC,CAAgCD,MAvKjC,C","file":"unknown","sourcesContent":["/**\n * The Sieve of Eratosthenes (an ancient Greek prime number generator) as a JavaScript library\n *\n * @author Tom Weatherhead\n * @copyright 2018\n * @license MIT\n * @version 0.0.0\n */\n(function (global) {\n\n\t/**\n\t * gcd\n\t *\n\t * @method gcd\n\t * @param  {Mixed}   m          String, Int or Float representation of the first number\n\t * @param  {Mixed}   n          String, Int or Float representation of the second number\n\t * @return {Int}                The greatest common divisor of m and n\n\t */\n\tfunction gcd (m, n) {\n\t\t// See https://en.wikipedia.org/wiki/Euclidean_algorithm\n\n\t\tm = parseInt(m, 10);\n\t\tn = parseInt(n, 10);\n\n\t\tif (isNaN(m) || isNaN(n)) {\n\t\t\tthrow new Error('Invalid arguments');\n\t\t// } else if (m < 0) {\t\t// Unnecessary check; implicitly handled by the following two checks.\n\t\t\t// return gcd(-m, n);\n\t\t} else if (n < 0) {\n\t\t\treturn gcd(m, -n);\n\t\t} else if (m < n) {\n\t\t\treturn gcd(n, m);\n\t\t} else if (n === 0) {\n\t\t\treturn m;\n\t\t} else {\n\t\t\treturn gcd(n, m % n);\n\t\t}\n\t}\n\n\t// Partial application for functional programming:\n\tgcd.partial = m => n => gcd(m, n);\n\n\t/**\n\t * isPrime\n\t *\n\t * @method isPrime\n\t * @param  {Int}   \t\tm          \t\tThe integer to be tested\n\t * @param  {Array<Int>}\tprimes          The array of primes found thus far\n\t * @return {Boolean}                \tThe Boolean that indicates whether or not m is prime\n\t */\n\tfunction isPrime (m, primes) {\n\n\t\tfor (let p of primes) {\n\n\t\t\tif (p * p > m) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (m % p === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * sieve\n\t *\n\t * @method sieve\n\t * @param  {Mixed}   n          \t\tString, Int or Float representation of the ceiling\n\t * @return {Array<Int>}                \tThe list of prime numbers less than n\n\t */\n\tfunction sieve (n) {\t\t\t\t\t// eslint-disable-line no-unused-vars\n\t\t// See https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n\n\t\t// Ensure than n is an integer. Convert if necessary.\n\t\tn = parseInt(n, 10);\n\n\t\tif (isNaN(n)) {\n\t\t\tthrow new Error('Invalid argument');\n\t\t} else if (n <= 2) {\n\t\t\treturn [];\n\t\t}\n\n\t\tlet primes = [2];\n\n\t\tfor (let m = 3; m < n; m += 2) {\n\n\t\t\tif (isPrime(m, primes)) {\n\t\t\t\tprimes.push(m);\n\t\t\t}\n\t\t}\n\n\t\treturn primes;\n\t}\n\n\t/**\n\t * factorize\n\t *\n\t * @method factorize\n\t * @param  {Mixed}   n          \t\tString, Int or Float representation of n, the integer to factorize\n\t * @return {Array<Int>}                \tThe list of prime factors of n\n\t */\n\tfunction factorize (n) {\t\t\t\t\t// eslint-disable-line no-unused-vars\n\t\tn = parseInt(n, 10);\n\n\t\tif (isNaN(n)) {\n\t\t\tthrow new Error('Invalid argument');\n\t\t} else if (n < 2) {\n\t\t\treturn [];\n\t\t}\n\n\t\tlet primes = [];\n\t\tlet factors = [];\n\t\tlet m = 2;\n\t\tlet m_increment = 1;\n\n\t\t//while (true) {\t\t// eslint-disable-line no-constant-condition\n\t\tfor (;;) {\n\n\t\t\tif (m * m > n) {\n\t\t\t\tfactors.push(n);\n\n\t\t\t\treturn factors;\n\t\t\t}\n\n\t\t\tif (isPrime(m, primes)) {\n\t\t\t\tprimes.push(m);\n\n\t\t\t\twhile (n % m === 0) {\n\t\t\t\t\tn /= m;\n\t\t\t\t\tfactors.push(m);\n\n\t\t\t\t\tif (n === 1) {\n\t\t\t\t\t\treturn factors;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tm += m_increment;\n\t\t\tm_increment = 2;\n\t\t}\n\n\t\t// Unreachable code:\n\t\t//console.log('Return 3', original_n, n, primes, factors);\n\n\t\t//return factors;\n\t}\n\n\t// Node, AMD, and window are supported.\n\n\tconst version = '0.0.0';\n\n\tif (typeof exports !== 'undefined') {\n\t\tmodule.exports = {\n\t\t\tversion: version,\n\t\t\tgcd: gcd,\n\t\t\tsieve: sieve,\n\t\t\tfactorize: factorize\n\t\t};\n\t} else if (typeof define === 'function' && define.amd !== void 0) {\n\t\tdefine(() => {\n\t\t\treturn {\n\t\t\t\tversion: version,\n\t\t\t\tgcd: gcd,\n\t\t\t\tsieve: sieve,\n\t\t\t\tfactorize: factorize\n\t\t\t};\n\t\t});\n\t} else {\n\t\tglobal.gcd = gcd;\n\t\tglobal.sieve = sieve;\n\t\tglobal.factorize = factorize;\n\t}\n}(typeof window !== 'undefined' ? window : global));\n"]}